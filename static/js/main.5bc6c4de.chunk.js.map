{"version":3,"sources":["Question/index.js","Option/index.js","TimerClass/index.js","Quiz/index.js","QuizResult/index.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","style","fontSize","margin","question","Option","onClick","disableClick","triggerClick","option","correct","className","selected","active","text","TimerClass","state","timer","this","setState","setTimeout","callBackFn","console","log","clearTimeout","React","Component","Quiz","score","showAnswers","selection","displayedQuestionIndex","status","userChoices","questions","isCorrect","push","options","length","history","pathname","map","element","index","correct_choice","bind","key","QuizResult","location","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bc6c4de.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Question(props) {\r\n\r\n    return (\r\n        <div style={{fontSize: '48px', margin: '32px'}}>{props.question}</div>\r\n    )\r\n}","import './styles.css';\r\nimport Confetti from 'react-dom-confetti';\r\nimport React from \"react\";\r\n\r\nexport default function Option(props) {\r\n    function handleClick() {\r\n        props.triggerClick(props.option, props.correct);\r\n    }\r\n    return (\r\n\r\n        <div onClick= {!props.disableClick ? handleClick : null}\r\n            className={`option ${props.selected? props.correct ? 'correct-option' : 'wrong-option' : ''}`}>\r\n            <Confetti active={props.correct && props.selected} />\r\n            {props.text}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport './style.css'\r\n\r\nclass TimerClass extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            timer: null\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            timer: setTimeout(() => {\r\n                this.props.callBackFn(null, false);\r\n            }, 10000),\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('com2');\r\n        this.state.timer = null;\r\n        clearTimeout(this.state.timer);\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.disableClick){\r\n            return (<div className={\"timer\"}/>);\r\n        }\r\n        else{\r\n            clearTimeout(this.state.timer);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default TimerClass;","import React from \"react\";\r\nimport Question from \"../Question\";\r\nimport Option from \"../Option\";\r\nimport './styles.css';\r\nimport TimerClass from \"../TimerClass\";\r\n\r\nclass Quiz extends React.Component {\r\n    state = {\r\n        score: 0,\r\n        showAnswers: false,\r\n        selection: null,\r\n        displayedQuestionIndex: 0,\r\n        disableClick: false,\r\n        status: null,\r\n        userChoices: [],\r\n    };\r\n\r\n    questions = [\r\n        {\r\n            'text': \"Who is current PM of India?\",\r\n            'options': ['Narendra Modi', 'Rahul Gandhi', 'Manmohan Singh', 'Sonia Gandhi'],\r\n            'correct_choice': 0\r\n        },\r\n        {\r\n            'text': \"What is capital of Orissa?\",\r\n            'options': ['Chandigarh', 'Bhubaneshwar', 'Tripura', 'Nagaland'],\r\n            'correct_choice': 1\r\n        },\r\n        {\r\n            'text': `In the context to India's wild life, the flying fox is a __?`,\r\n            'options': ['Bat', 'Vulture', 'Stok', 'Kite'],\r\n            'correct_choice': 0\r\n        },\r\n        {\r\n            'text': 'What percentage of land area should remain covered by forest to maintain Ecological balance?',\r\n            'options': ['10%', '33%', '5%', 'None of these'],\r\n            'correct_choice': 1\r\n        },\r\n        {\r\n            'text': ' The purest form of iron is',\r\n            'options': ['Wrought iron', 'Steel', 'Pig iron', 'Nickel steel'],\r\n            'correct_choice': 0\r\n        },\r\n        {\r\n            'text': 'Layer of atmosphere in which Ozone layer lies is',\r\n            'options': ['Exosphere', 'Mesosphere', 'Troposphere', 'Stratosphere'],\r\n            'correct_choice': 3\r\n        },\r\n    ];\r\n\r\n    async triggerClick(option, isCorrect) {\r\n        this.state.userChoices.push(option !== null ? this.questions[this.state.displayedQuestionIndex].options[option]: 'Timed out');\r\n        if(this.state.displayedQuestionIndex === this.questions.length - 1){\r\n            this.props.history.push({\r\n                pathname: '/result',\r\n                state: {\r\n                    score: this.state.score,\r\n                    questions: this.questions,\r\n                    userChoices: this.state.userChoices,\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        console.log('Entered triggerClick with:', option, isCorrect);\r\n        if (isCorrect) {\r\n            this.setState({\r\n                status: 'Yayy!! Correct Answer!',\r\n                score: this.state.score + 10,\r\n            })\r\n        }\r\n        else if(option === null){\r\n            this.setState({\r\n                status: 'Sorry. Timed Out',\r\n            })\r\n        }\r\n        else if(!isCorrect){\r\n            this.setState({\r\n                status: 'Sorry. Wrong Answer!',\r\n            })\r\n        }\r\n        this.setState({\r\n            selection: option,\r\n            disableClick: true,\r\n        });\r\n        await setTimeout(() => {\r\n            this.setState({\r\n                displayedQuestionIndex: this.state.displayedQuestionIndex + 1,\r\n                disableClick: false,\r\n                selection: null,\r\n                status: null,\r\n            });\r\n             }, 3000);\r\n\r\n        console.log(this.state.selection, ' is the selected option');\r\n    }\r\n\r\n    render() {\r\n            return this.state.displayedQuestionIndex < this.questions.length ?\r\n                <div className=\"header\">\r\n                    <div className=\"score\">Score: {this.state.score}</div>\r\n                    <Question question={this.questions[this.state.displayedQuestionIndex].text}/>\r\n                    <div className=\"options-container\">\r\n                        {this.questions[this.state.displayedQuestionIndex].options.map((element, index) => {\r\n                            return (<\r\n                                Option text={element}\r\n                                       correct={this.questions[this.state.displayedQuestionIndex].correct_choice === index}\r\n                                       option={index} selected={this.state.selection === index}\r\n                                       disableClick ={this.state.disableClick}\r\n                                       triggerClick={this.triggerClick.bind(this)}\r\n                            />);\r\n                        })}\r\n                    </div>\r\n                    <div className={'status'}>{this.state.status}</div>\r\n                    <TimerClass\r\n                        key = {this.state.displayedQuestionIndex}\r\n                        disableClick ={this.state.disableClick}\r\n                        callBackFn = {this.triggerClick.bind(this)}\r\n                    />\r\n                </div> : null;\r\n    }\r\n}\r\n\r\nexport default Quiz;","import * as React from \"react\";\r\nimport './style.css'\r\n\r\nfunction ResultRow(props) {\r\n    return(<div className={\"result-row\"}>\r\n        <div className={'question-column'}>\r\n            {props.question}\r\n        </div>\r\n        <div className={'correct-choices'}>\r\n            {props.correctChoice}\r\n        </div>\r\n        <div className={`user-choices  ${(props.userChoice === props.correctChoice) \r\n            ? 'correct-option' \r\n            : props.userChoice !== 'Timed out' \r\n                ? props.userChoice !== 'YOUR CHOICE' \r\n                    ? 'wrong-option'\r\n                    : ''\r\n                : 'timed-out'}`\r\n        }>\r\n            {props.userChoice}\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nfunction QuizResult(props){\r\n    return (<div>\r\n            <head>\r\n                <title>Result Page</title>\r\n            </head>\r\n            <body>\r\n            <div>Your total score is : {props.location.state.score}</div>\r\n\r\n            <table className={'result-table'}>\r\n                {/*<ResultRow question = {'QUESTION'} correctChoice = {'CORRECT CHOICE'} userChoice = {'YOUR CHOICE'}/>*/}\r\n                <tr>\r\n                    <th>QUESTION</th>\r\n                    <th>CORRECT CHOICE</th>\r\n                    <th>YOUR CHOICE</th>\r\n                </tr>\r\n                {props.location.state.questions.map(\r\n                    (question, index) =>\r\n                        // <ResultRow question = {question.text} correctChoice = {question.options[question.correct_choice]} userChoice = {props.location.state.userChoices[index]}/>\r\n                        <tr>\r\n                            <td>{question.text}</td>\r\n                            <td>{question.options[question.correct_choice]}</td>\r\n                            <td>{props.location.state.userChoices[index]}</td>\r\n                        </tr>\r\n                    // question.options[question.text]\r\n                )}\r\n            </table>\r\n            </body>\r\n        </div>);\r\n\r\n}\r\n\r\nexport default QuizResult;","import React from 'react';\r\nimport './App.css';\r\nimport Quiz from \"./Quiz\";\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\nimport QuizResult from \"./QuizResult\";\r\n\r\nfunction App() {\r\n  return (\r\n          <Router>\r\n              <div className=\"App\">\r\n                  <header className=\"App-header\">\r\n              <Switch>\r\n                  <Route exact={true} path={'/'} component={Quiz}/>\r\n                  <Route exact={true} path={'/result'} component={QuizResult}/>\r\n              </Switch>\r\n                  </header>\r\n              </div>\r\n          </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}